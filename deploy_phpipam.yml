---
- name: "[Play 1] Deploy a new VM in the Red Hat Virtualization platform"
  hosts: localhost
  gather_facts: false
  connection: local
  vars:
    vm_fqdn:
    vm_eth0_ip:
    vm_eth0_netmask:
    vm_eth0_gw:
    vm_eth1_ip:
    vm_eth1_netmask:
    vm_eth1_gw:
    vm_dns:
    rhv_vnic_profile_name:
    rhv_vm_template:
    rhv_vm_cluster:
    rhv_vm_cpu_cores:
    rhv_vm_memory:

  tasks:
  - name: Include secrets to be used
    no_log: true
    include_vars: secrets.yml

  - name: Obtain SSO token for authentication to Red Hat Virtualization
    no_log: false
    ovirt_auth:
      url: "{{ rhv_vm_url }}"
      username: "{{ rhv_vm_username }}"
      password: "{{ rhv_vm_password }}"
      ca_file: "{{ rhv_vm_cafile }}"

  - name: Create Virtual Machine
    ovirt_vms:
      auth: "{{ ovirt_auth }}"
      state: present
      name: "{{ vm_fqdn }}"
      template: "{{ rhv_vm_template }}"
      cluster: "{{ rhv_vm_cluster }}"
      cpu_cores: "{{ rhv_vm_cpu_cores }}"
      memory: "{{ rhv_vm_memory }}"
      wait: True
      nics:
        - name: nic2
          profile_name: "{{ rhv_vnic_profile_name }}"
      cloud_init:
        host_name: "{{ vm_fqdn }}"
        dns_servers: "{{ vm_dns }}"
      cloud_init_nics:
        - nic_name: eth0
          nic_boot_protocol: static
          nic_ip_address: "{{ vm_eth0_ip }}"
          nic_netmask: "{{ vm_eth0_netmask }}"
          nic_on_boot: true
        - nic_name: eth1
          nic_boot_protocol: static
          nic_ip_address: "{{ vm_eth1_ip }}"
          nic_netmask: "{{ vm_eth1_netmask }}"
          nic_gateway: "{{ vm_eth1_gw }}"
          nic_on_boot: true

  - name: Wait for Virtual Machine to boot up and become responsive to SSH
    wait_for:
      port=22
      host="{{ vm_eth1_ip }}"
      search_regex=OpenSSH
      delay=10

  - name: Revoke the SSO token we generated for provisioning the Virtual Machine
    ovirt_auth:
      state: absent
      ovirt_auth: "{{ ovirt_auth }}"

  - name: Setup in-memory inventory for just created VM
    add_host:
      name: "{{ vm_eth1_ip }}"
      groups: just_created_vms

- name: "[Play 2] Post Configuration of VM, setup the identity of the server"
  hosts: just_created_vms

  tasks:
  - name: Include secrets
    no_log: true
    include_vars: secrets.yml
  - include_role:
      name: ansible-role-resolv-conf
  - include_role:
      name: ansible-role-satellite-bootstrap
  - include_role:
      name: ansible-role-date-time
  - include_role:
      name: ansible-role-ipa-client
#  - include_role:
#      name: ansible-role-nagios-nrpe

#- name: "[Play 3] Post Configuration of monitoring, ensure system is monitored in Nagios"
#  hosts: nagios.labrats.se
#  tasks:
#  - name: Include secrets
#    no_log: true
#    include_vars: secrets.yml
#  - include_role:
#      name: ansible-role-nagios-bootstrap
#    vars:
#      monitored_server: "{{ short_hostname + '.' + domain }}"
#      nagios_bootstrap_state: present

- name: "[Play 4] Install phpipam, Apache, MySQL and PHP"
  hosts: just_created_vms
  vars:
    phpipam_documentroot:
    phpipam_version:
    # SHA-512 encrypted pass, # perl -e 'print crypt("password","\$6\$saltsalt\$") . "\n"'
    phpipam_admin_pass:
    # API app
    phpipam_api_id:
    phpipam_mysql_root_password:

  tasks:
  - include_role:
      name: geerlingguy.git
    vars:
      git_packages:
        - git
        
  - include_role:
      name: marcelnijenhof.firewalld
    vars:
      firewalld_allow_services:
        - { service: "http" }
        - { service: "https" }
        
  - include_role:
      name: geerlingguy.apache
    vars:
      apache_vhosts:
        - { servername: "{{ ansible_fqdn }}", documentroot: "{{ phpipam_documentroot }}" }
        
  - include_role:
      name: geerlingguy.php
    vars:
      php_enablerepo: "rhel-7-server-optional-rpms"
      php_date_timezone: "Europe/Stockholm"
      php_packages:
        - php
        - php-cli
        - php-common
        - php-gd
        - php-ldap
        - php-mbstring
        - php-pdo
        - php-pear
        - php-xml
        - php-snmp
        - php-mysql
        - php-mcrypt
        
  - include_role:
      name: geerlingguy.mysql
    vars:
      # use vault for securing the mysql_root_password
      mysql_root_password: "{{ phpipam_mysql_root_password }}"
      mysql_databases:
        - name: phpipam
      mysql_users:
        - name: phpipam
          host: "%"
          password: phpipamadmin
          priv: "phpipam.*:ALL"
      
  - name: Install phpipam
    git:
      repo: "https://github.com/phpipam/phpipam.git"
      dest: "{{ phpipam_documentroot }}"
      clone: yes
      umask: "022"
      force: yes
      version:  "{{ phpipam_version }}"
      
  - name: Ensure directories are 0755
    command: find {{ phpipam_documentroot }} -type d -exec chmod 0755 {} \;

  - name: Ensure files are 0644
    command: find {{ phpipam_documentroot }} -type f -exec chmod 0644 {} \;

  - name: Set SELinux file context
    command: chcon -t httpd_sys_rw_content_t "{{ item }}" -R
    with_items:
      - "{{phpipam_documentroot+'/app/admin/import-export/upload/'}}"
      - "{{phpipam_documentroot+'/app/subnets/import-subnet/upload/'}}"
      - "{{phpipam_documentroot+'/css/images/logo/'}}"

  - name: create config.php file
    copy:
      src: "{{phpipam_documentroot+'/config.dist.php'}}"
      dest: "{{phpipam_documentroot+'/config.php'}}"
      remote_src: yes
      owner: root
      group: root
      mode: 0644
      
  - name: sql patch file
    template:
      src: "phpipam_first_setup.sql.j2"
      dest: "{{ phpipam_documentroot }}/db/phpipam_first_setup.sql"
      
  - name: Import db schema
    mysql_db:
      state: import
      name: phpipam
      target: "{{ phpipam_documentroot }}/db/SCHEMA.sql"

  - name: Import db first setup patch
    mysql_db:
      state: import
      name: phpipam
      target: "{{ phpipam_documentroot }}/db/phpipam_first_setup.sql"
